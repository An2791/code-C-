#include<iostream>
#include <sstream>
#include <fstream>
#include <stdlib.h>
#include<string.h>
#include <conio.h>
#include <string>
#include<stdio.h>
#include<vector>
#include <bits/stdc++.h>
#define MAX_LENGTH 100
#define stringify( name ) #name 

using namespace std;

class SV {
private:
	string mssv, lop, ngaySinh, hoTen, xepLoai;
	double tinHieu, tinHoc, lapTrinh, tiengAnhA2, tBc;

public:
	SV() {

	}

	SV(string mssv, string lop, string ngaySinh, string hoTen, double tinHieu, double tinHoc, double tiengAnhA2, double lapTrinh) {
		this->mssv = mssv;
		this->lop = lop;
		this->ngaySinh = ngaySinh;
		this->hoTen = hoTen;
		this->tinHieu = tinHieu;
		this->tinHoc = tinHoc;
		this->tiengAnhA2 = tiengAnhA2;
		this->lapTrinh = lapTrinh;
		this->tBc = this->getDTB();
		this->xepLoai = this->getXepLoai();
	}

	string getMssv() {
		return this->mssv;
	}

	void setMssv(string mssv) {
		this->mssv = mssv;
	}

	string getLop() {
		return this->lop;
	}

	void setLop(string lop) {
		this->lop = lop;
	}

	string getNgaySinh() {
		return this->ngaySinh;
	}

	void setNgaySinh(string ngaySinh) {
		this->ngaySinh = ngaySinh;
	}

	string getHoTen() {
		return this->hoTen;
	}

	void setHoTen(string hoTen) {
		this->hoTen = hoTen;
	}

	double getTinHieu() {
		return this->tinHieu;
	}

	void setTinHieu(double tinHieu) {
		this->tinHieu = tinHieu;
	}

	double getTinHoc() {
		return this->tinHoc;
	}

	void setTinHoc(double tinHoc) {
		this->tinHoc = tinHoc;
	}

	double getLapTrinh() {
		return this->lapTrinh;
	}

	void setLapTrinh(double lapTrinh) {
		this->lapTrinh = lapTrinh;
	}

	double getTiengAnhA2() {
		return this->tiengAnhA2;
	}

	void setTiengAnhA2(double tiengAnhA2) {
		this->tiengAnhA2 = tiengAnhA2;
	}

	void toString() {
		cout << "MSSV: " << this->mssv << ", ";
		cout << "Ho ten: " << this->hoTen << ", ";
		cout << "Lop: " << this->lop << ", ";
		cout << "Ngay sinh: " << this->ngaySinh << ", ";
		cout << "TinHieu: " << this->tinHieu << ", ";
		cout << "TinHoc: " << this->tinHoc << ", ";
		cout << "LapTrinh: " << this->lapTrinh << ", ";
		cout << "TiengAnh(A2): " << this->tiengAnhA2 << ", ";
		cout << "TBC: " << this->tBc << ", ";
		cout << "Xep loai: " << this->xepLoai << "." << endl;
	}

	double getDTB() {
		return (this->tinHieu + this->tinHoc + this->lapTrinh + this->tiengAnhA2) / 4;
	}

	string getXepLoai() {
		if (this->tBc <= 10 && this->tBc >=8 ) return "Gioi";
		if (this->tBc < 8 && this->tBc >= 6) return "Kha";
		if (this->tBc < 6 && this->tBc >= 4) return "Trung binh";
		if (this->tBc < 4) return "Yeu";
	}

};

class DanhSachSV{
	private:
		SV list[MAX_LENGTH];
		int size;
	public:
		DanhSachSV(){
			this->size = 0;
		}
		
		void add(SV sv){
			list[this->size] = sv;
			++this->size;
		}
		
		void remove(int index){
			for(int i = index; i < this->size; i++){
				this->list[i] = this->list[i + 1];
			}
			--this->size;
		}
		
		void put(int index, SV sv){
			this->list[index] = sv;
		}
		
		SV* getList(){
			return this->list;
		}
		
		int getSize(){
			return this->size;
		}
		
		int getIndexBy(string mssv){
			for(int i = 0; i < this->size; i++){
				if(this->list[i].getMssv() == mssv){
					return i;
				}
			}
			return -1;
		}
		
		SV getSVBy(string mssv){
			for(int i = 0; i < this->size; i++){
				if(this->list[i].getMssv() == mssv){
					return this->list[i];
				}
			}
			return SV();
		}
		
		SV get(int index){
			return this->list[index];
		}	
};
//==================== support function ====================

double stringToDouble(string s) {
	stringstream geek(s);
	int diem;
	geek >> diem;

	return diem;
}

int stringToInt(string s) {
	stringstream geek(s);
	int diem;
	geek >> diem;

	return diem;
}

bool kiemTraNhapSo(string s) {
	std::string::const_iterator it = s.begin();
	while (it != s.end() && std::isdigit(*it)) ++it;
	return !s.empty() && it == s.end();
}

bool kiemTraNhapDiem(string s) {
	bool check = kiemTraNhapSo(s);
	if (!check) {
		return false;
	}

	int diem = stringToInt(s);

	if (diem >= 0 && diem <= 10) {
		return true;
	}

	return false;
}

double nhapDiem() {
	string s;
nhaplai:
	cin >> s;
	bool check = kiemTraNhapDiem(s);
	if (!check) {
		cout << "Nhap lai:";
		goto nhaplai;
	}

	return stringToDouble(s);
}

int nhapSo() {
	string s;
nhaplai:
	cin >> s;
	bool check = kiemTraNhapSo(s);
	if (!check) {
		cout << "Thong tin khong hop le, nhap lai: ";
		goto nhaplai;
	}

	return stringToInt(s);
}

 //DOC, GHI FILE
void writeLine(ofstream& outfile, SV sv) {
	outfile << sv.getMssv() << "," << sv.getHoTen() << "," << sv.getLop() << ",";
	outfile << sv.getNgaySinh() << "," << sv.getTinHieu() << "," << sv.getTinHoc() << ",";
	outfile << sv.getLapTrinh() << "," << sv.getTiengAnhA2() << endl;
}

void writeFile(DanhSachSV danhSachSV, char fileName[], bool append){
	ofstream outFile;
	
	if(append)
		outFile.open(fileName, ios_base::app);
	else
		outFile.open(fileName);
	
	for(int i = 0; i < danhSachSV.getSize(); i++){
		SV sv = *(danhSachSV.getList() + i);
		writeLine(outFile, sv);
	}
	
	outFile.close();
}


SV readLine(ifstream& infile){
	string mssv, hoTen, lop, ngaySinh;
	double toan, ly, tin, anh;
	string temp;
	getline(infile, mssv, ',');
	getline(infile, hoTen, ',');
	getline(infile, lop, ',');
	getline(infile, ngaySinh, ',');

	getline(infile, temp, ',');
	toan = stringToDouble(temp);

	getline(infile, temp, ',');
	tin = stringToDouble(temp);

	getline(infile, temp, ',');
	ly = stringToDouble(temp);

	getline(infile, temp);
	anh = stringToDouble(temp);	
	if(!mssv.empty()) 
		return SV(mssv, lop, ngaySinh, hoTen, toan, ly, anh, tin);
	else
		return SV();
}

int getSize(SV danhSachSV[]){
	return sizeof(danhSachSV) / sizeof(SV);
}

void readFile(DanhSachSV &danhSachSV, char fileName[]) {
	ifstream inputFile;
	inputFile.open(fileName, ios_base::in);
	if(inputFile.fail()){
		cout << "Open file fail" << endl;
		return;
	}
	
	while (inputFile.eof() == false) {
		SV sv = readLine(inputFile);
		if(!sv.getMssv().empty())
			danhSachSV.add(sv);
	}
	
	inputFile.close();
}

void hoanVi(SV &sv1, SV &sv2) {
	SV temp = sv1;
	sv1 = sv2;
	sv2 = temp;
}

void sapXepTangDanTheoDtb(DanhSachSV &danhSachSV) {
	for (int i = 0; i < danhSachSV.getSize() - 1; i++) {
		for (int j = i + 1; j < danhSachSV.getSize(); j++) {
			if (danhSachSV.get(i).getDTB() > danhSachSV.get(j).getDTB()) {
				SV sv1 = *(danhSachSV.getList() + i);
				SV sv2 = *(danhSachSV.getList() + j);
				hoanVi(sv1, sv2);
				danhSachSV.put(i, sv1);
				danhSachSV.put(j, sv2);
			}
		}
	}
}

void sapXepGiamDanTheoDtb(DanhSachSV &danhSachSV) {
	for (int i = 0; i < danhSachSV.getSize() - 1; i++) {
		for (int j = i + 1; j < danhSachSV.getSize(); j++) {
			if (danhSachSV.get(i).getDTB() < danhSachSV.get(i).getDTB()) {
				SV sv1 = *(danhSachSV.getList() + i);
				SV sv2 = *(danhSachSV.getList() + j);
				hoanVi(sv1, sv2);
				danhSachSV.put(i, sv1);
				danhSachSV.put(j, sv2);
			}
		}
	}
}

//==================== end ====================

//==================== main function ====================
SV nhapSV() {
	string mssv, hoTen, lop, ngaySinh;
	double tinHieu, tinHoc, lapTrinh, tiengAnhA2;
	cout << "MSSV: ";
	getline(cin, mssv);
	cout << "Ten: ";
	getline(cin,  hoTen);
	cout << "Lop: ";
	getline(cin,  lop);
	cout << "Ngay sinh: ";
	getline(cin,  ngaySinh);
	cout << "Diem TinHieu: ";
	tinHieu = nhapDiem();
	cout << "Diem TinHoc: ";
	tinHoc = nhapDiem();
	cout << "Diem LapTrinh: ";
	lapTrinh = nhapDiem();
	cout << "Diem TiengAnhA2: ";
	tiengAnhA2 = nhapDiem();
	cin.ignore();
	SV sv = SV(mssv, lop, ngaySinh, hoTen, tinHieu, tinHoc, tiengAnhA2, lapTrinh);
	return sv;
}

bool existSinhVien(vector<SV> danhSachSV, string mssv) {
	for (int i = 0; i < danhSachSV.size(); i++) {
		if (danhSachSV[i].getMssv() == mssv) return true;
	}
	return false;
}

int viTriSinhVien(SV danhSachSV[], string mssv) {
	for (int i = 0; i < getSize(danhSachSV); i++) {
		if (danhSachSV[i].getMssv() == mssv) return i;
	}
	return -1;
}

void xoaSinhVien(DanhSachSV &danhSachSV, char fileName[]) {
	ofstream outputFile;
	outputFile.open(fileName);
	
	string mssv;
	cout << "Nhap mssv:";
	getline(cin,  mssv);
	int index = danhSachSV.getIndexBy(mssv);
	
	if (index != -1) {
		danhSachSV.remove(index);
		writeFile(danhSachSV, fileName, false);
		cout << "OK ^-^ OK" << endl;
	}
	else {
		cout << "Khong ton tai sinh vien, xoa that bai!!!" << endl;
	}
	outputFile.close();
}

void timSinhVienTheoMssv(DanhSachSV danhSachSV) {
	string mssv;
	cout << "Nhap mssv: ";
	getline(cin, mssv);
	for (int i = 0; i < danhSachSV.getSize(); i++) {
		if (mssv == danhSachSV.get(i).getMssv()) {
			cout << "========== THONG TIN SINH VIEN ==========" << endl;
			danhSachSV.get(i).toString();
			return;
		}
	}

	cout << "Khong tim thay sinh vien" << endl;
	return;
}

void themSV(DanhSachSV &danhSachSV, char fileName[]) {
	SV sv = nhapSV();
	
	danhSachSV.add(sv);
	
	ofstream outputFile;
	outputFile.open(fileName, ios_base::app);
	
	writeLine(outputFile, sv);
	
	outputFile.close();
}

void inDanhSach(DanhSachSV danhSachSV) {
	cout << "Tong so sinh vien: " << danhSachSV.getSize() << endl;
	for (int i = 0; i < danhSachSV.getSize(); i++) {
		cout << "***Sinhvien : " << i + 1 << endl;
		SV sv = *(danhSachSV.getList() + i);
		sv.toString();
		cout << "****************" << endl;
	}
}


void menuChinhSuaSinhVien() {
	cout << "1. Ho ten" << endl;
	cout << "2. Lop" << endl;
	cout << "3. Ngay sinh" << endl;
	cout << "4. Diem TinHieu" << endl;
	cout << "5. Diem TinHoc" << endl;
	cout << "6. Diem TiengAnhA2" << endl;
	cout << "7. Diem LapTrinh" << endl;
	cout << "Nhan '0' de quay lai" << endl;
}

void chinhSuaSinhVien(DanhSachSV &danhSachSV, char fileName[]) {
	string mssv;
	cout << "Nhap ma sinh vien: ";
	cin >> mssv;
	int index = danhSachSV.getIndexBy(mssv);
	
	if (index == -1) {
		cout << "Khong tim thay sinh vien" << endl;
		return;
	}
	
	SV sv = *(danhSachSV.getList() + index);
	
	do {
		system("cls");
		sv.toString();
		menuChinhSuaSinhVien();
		cout << "Chon muc chinh sua: ";
		int chon = nhapSo();
		switch (chon) {
		case 1: {
			cout << "Nhap ho ten: ";
			string hoTen;
			cin >> hoTen;
			sv.setHoTen(hoTen);
			break;
		}
		case 2: {
			cout << "Nhap lop: ";
			string lop;
			cin >> lop;
			sv.setLop(lop);
			break;
		}
		case 3: {
			cout << "Nhap ngay sinh: ";
			string ngaySinh;
			cin >> ngaySinh;
			sv.setNgaySinh(ngaySinh);
			break;
		}

		case 4: {
			cout << "Nhap diem TinHieu: ";
			double tinHieu = nhapDiem();
			sv.setTinHieu(tinHieu);
			break;
		}
		case 5: {
			cout << "Nhap diem TinHoc: ";
			double tinHoc = nhapDiem();
			sv.setTinHoc(tinHoc);
			break;
		}
		case 6: {
			cout << "Nhap diem LapTrinh: ";
			double lapTrinh = nhapDiem();
			sv.setLapTrinh(lapTrinh);
			break;
		}
		case 7: {
			cout << "Nhap diem TiengAnhA2: ";
			double tiengAnhA2 = nhapDiem();
			sv.setTiengAnhA2(tiengAnhA2);
			break;
		}
		case 0: {
			return;
		}
		default:
			break;
		}
		danhSachSV.put(index, sv);
		cout << "****** Nhan phim bat ky de luu thong tin ******";
		char ch = _getch();
		writeFile(danhSachSV, fileName, false);
	} while (true);
	
	
}

void top5SinhVienDiemCaoNhat(DanhSachSV danhSachSV) {
	cout << "========== TOP 5 SINH VIEN DIEM CAO NHAT ==========" << endl;

	sapXepGiamDanTheoDtb(danhSachSV);

	int size = danhSachSV.getSize() < 5 ? danhSachSV.getSize() : 5;

	for (int i = 0; i < size; i++) {
		danhSachSV.get(i).toString();
	}
}

void top10SinhVienDiemThapNhat(DanhSachSV danhSachSV) {
	cout << "========== TOP 10 SINH VIEN DIEM THAP NHAT ==========" << endl;

	sapXepTangDanTheoDtb(danhSachSV);

	int size = danhSachSV.getSize() < 10 ? danhSachSV.getSize() : 10;

	for (int i = 0; i < size; i++) {
		danhSachSV.get(i).toString();
	}
}


void mainMenu() {
	cout << "     ************** QUAN LY SINH VIEN ************** " << endl;
	cout << "     * 1.Them sinh vien.                   			  * " << endl;
	cout << "     * 2.Chinh sua thong tin sinh vien.    			  * " << endl;
	cout << "     * 3.Xoa sinh vien.         		    		  * " << endl;
	cout << "     * 4.In danh sach sinh vien.           			  * " << endl;
	cout << "     * 5.Tim sinh vien (theo MSSV).        			  * " << endl;
	cout << "     * 6.Top 5 sinh vien co diem cao nhat. 			  * " << endl;
	cout << "     * 7.Top 10 sinh vien co diem thap nhat.			  * " << endl;
	cout << "     *************************************************** " << endl;
	cout << " ***Nhan '0' de thoat chuong trinh." << endl;
}

//==================== end ====================

int main() {
	char FILE_PATH[] = "D:\\Users\\withu\\OneDrive\\Máy tính\\student.txt";
	
	DanhSachSV danhSachSV = DanhSachSV();
	readFile(danhSachSV, FILE_PATH);

	bool stop = false;
	do {

		mainMenu();
		cout << "Nhap lua chon: ";
		int chon = nhapSo();
		cin.ignore();
		cout << endl;

		switch (chon) {
		case 1: {
			themSV(danhSachSV, FILE_PATH);
			break;
		}
		case 2: {
			chinhSuaSinhVien(danhSachSV, FILE_PATH);
			break;
		}
		case 3: {
			xoaSinhVien(danhSachSV, FILE_PATH);
			break;
		}
		case 4: {
			inDanhSach(danhSachSV);
			break;
		}
		case 5: {
			timSinhVienTheoMssv(danhSachSV);
			break;
		}
		case 6: {
			top5SinhVienDiemCaoNhat(danhSachSV);
			break;
		}
		case 7: {
			top10SinhVienDiemThapNhat(danhSachSV);
			break;
		}
		case 0: {
			stop = true;
			break;
		}
		default:
			break;
		}
		cout << "****** Nhan phim bat ky de tiep tuc ******";
		char ch = _getch();
		system("cls");
	} while (!stop);
	
	return 0;
}
